// √ânigme S√©curit√© - Cybers√©curit√© physique et sensibilisation (3 niveaux de difficult√©)
function loadSecurityPuzzle(container) {
  // Configuration de la difficult√© depuis l'API
  const difficulty = window.gameState?.difficulty || "easy";

  // D√©finition des √©nigmes selon la difficult√©
  const securityPuzzles = {
    easy: {
      hint: "Le code est une combinaison de lettres des mots en MAJUSCULE.",
      title: "Le mot de passe sur le post-it",
      content: `Dans une petite entreprise de production, CHAQUE employ√© dispose d'un compte personnel pour acc√©der aux machines.
Un jour, un technicien remarque que son coll√®gue a coll√© un post-it avec son mot de passe sur l'√©cran pour ne pas l'OUBLIER.
Rien de grave, pense-t-il‚Ä¶ jusqu'√† ce qu'un prestataire de passage prenne une photo de son poste.
Le lendemain, un acc√®s non autoris√© est d√©tect√©.
Depuis, un rappel a √©t√© fait : un mot de passe ne doit jamais √™tre ECRIT, partag√© ou affich√©.
Ce n'est pas qu'une r√®gle, c'est une PROTECTION pour toute l'entreprise.

√ânigme : Trouve le code cach√© dans les mots en MAJUSCULE.

üí° INFO : La s√©curit√© de base au travail passe par la protection des identifiants.
Un mot de passe affich√©, m√™me temporairement, peut compromettre tout un syst√®me.`,
      answer: "8",
      maxAttempts: 3,
    },
    medium: {
      hint: "Une fuite d'information est dans le message, plusieurs lettres sont en majuscules, dans le d√©sordre et permettront de former un mot, √† toi de voir quel mot cela donne ! Un seul chiffre peut √™tre cr√©√©.",
      title: "L'appel du faux support technique",
      content: `Un matin, L√©a, apprentie dans une soci√©t√© d'auTomatisation, re√ßoit un appel.
L'interlocuteur pr√©tend apPartenir √† l'√©quipe informatique et demande son aiDe pour "tester une mise √† jour urgente".
Press√©e, elle suit leS instructions : ouvrir un lien, entrer ses identifiants.
Quelques heures plus tard, plusieurs serveurs sont inaccessIbles ‚Äî un virus a √©t√© introduit.
L√©a d√©couvre Qu'elle a √©t√© victime d'une attaque dite "d'ing√©nierie sociale", o√π le pirate manipule pour obtenir coNfiance et acc√®s.
L'entreprise s'en sort, mais le√ßon retenUe : toujours v√©rifier la l√©gitimit√© d'une demAnde avant d'agir.

√ânigme : Les lettres en MAJUSCULE forment un mot. Quel chiffre ce mot repr√©sente-t-il ?

‚ö†Ô∏è ATTENTION : La manipulation et l'ing√©nierie sociale sont des techniques courantes.
Les pirates exploitent la confiance et l'urgence pour obtenir des acc√®s non autoris√©s.
Toujours v√©rifier l'identit√© de l'interlocuteur avant de donner des informations sensibles.`,
      answer: "1",
      maxAttempts: 3,
    },
    hard: {
      hint: "Il manque certaines lettres dans le texte. Trouve les lettres manquantes pour former un mot qui donne un chiffre.",
      title: "L'incident du badge perdu",
      content: `Dans une usine automatis√©e, les entr√©es sont s√©curis√©es par badge.
Un op√©rateur perd le sien dans le parking mais ne le signale pas tout de suite, pensant le retrouver.
Le lendemain, le syst√®me d√©tecte une connexion au c≈ìur du r√©seau √† une heure inhabituelle.
L'analyse montre u'n individu a utilis√© le badge pour entrer et installer une cl√© USB contenant un logiiel espion.
Aucun dommage majeur, mais l'alerte a √©t√© chaude :
le retard du signalement a permis au pirate de passer inaper√ßu.
Depuis, l'etreprise impose une r√®gle stricte : tout incident, m√™me anodin, doit √™tre signal√© imm√©diatemet.

√ânigme : Le texte contient des erreurs. Trouve le mot correct et extrais-en le chiffre.

üö® CRITIQUE : La cybers√©curit√© physique et la r√©activit√© sont essentielles.
Un badge perdu non signal√© peut compromettre toute la s√©curit√© d'une installation.
La rapidit√© de r√©action face aux incidents limite les d√©g√¢ts potentiels.`,
      answer: "5",
      maxAttempts: 3,
    },
  };

  const puzzle = securityPuzzles[difficulty];

  // Cr√©er l'interface de l'√©nigme
  container.innerHTML = `
    <div class="security-container">
      <div class="security-header">
        <h3>${puzzle.title}</h3>
        <div class="security-icon">üîí</div>
      </div>
      <div class="security-content">
        <div class="security-text">
          ${puzzle.content
            .split("\n")
            .map((line) => `<p>${line}</p>`)
            .join("")}
        </div>
        <div class="security-input-section">
          <label for="security-answer">Votre r√©ponse :</label>
          <input type="text" id="security-answer" maxlength="1" placeholder="?" />
          <button id="security-submit" class="btn btn-primary">Valider</button>
        </div>
        <div class="security-feedback" id="security-feedback"></div>
        <div class="security-attempts">
          <span id="security-attempts-count">Tentatives : 0/${
            puzzle.maxAttempts
          }</span>
        </div>
      </div>
    </div>
  `;

  // Variables pour le suivi des tentatives
  let attempts = 0;
  const maxAttempts = puzzle.maxAttempts;

  // √âl√©ments DOM
  const answerInput = document.getElementById("security-answer");
  const submitBtn = document.getElementById("security-submit");
  const attemptsCount = document.getElementById("security-attempts-count");
  const feedback = document.getElementById("security-feedback");

  // Fonction pour afficher le feedback
  function showFeedback(message, type = "info") {
    feedback.textContent = message;
    feedback.className = `security-feedback ${type}`;
  }

  // Fonction pour mettre √† jour le compteur de tentatives
  function updateAttempts() {
    attemptsCount.textContent = `Tentatives : ${attempts}/${maxAttempts}`;
  }

  // Fonction pour valider la r√©ponse
  function validateAnswer() {
    const userAnswer = answerInput.value.trim();

    if (!userAnswer) {
      showFeedback("Veuillez entrer une r√©ponse.", "error");
      return;
    }

    attempts++;
    updateAttempts();

    if (userAnswer === puzzle.answer) {
      showFeedback("‚úÖ Correct ! Vous avez trouv√© le code.", "success");
      answerInput.disabled = true;
      submitBtn.disabled = true;

      // Compl√©ter l'√©nigme apr√®s un court d√©lai
      setTimeout(() => {
        if (window.completePuzzle) {
          window.completePuzzle("security", puzzle.answer);
        }
      }, 1500);
    } else {
      if (attempts >= maxAttempts) {
        showFeedback(
          "‚ùå Nombre maximum de tentatives atteint. La r√©ponse √©tait : " +
            puzzle.answer,
          "error"
        );
        answerInput.disabled = true;
        submitBtn.disabled = true;
      } else {
        showFeedback(
          `‚ùå Incorrect. Il vous reste ${maxAttempts - attempts} tentative(s).`,
          "error"
        );
        answerInput.value = "";
        answerInput.focus();
      }
    }
  }

  // √âv√©nements
  submitBtn.addEventListener("click", validateAnswer);

  answerInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      validateAnswer();
    }
  });

  // Focus sur l'input
  answerInput.focus();
}

// Fonction pour afficher l'indice
function showSecurityHint() {
  const difficulty = window.gameState?.difficulty || "easy"; // M√™me difficult√© que dans loadSecurityPuzzle
  const securityPuzzles = {
    easy: {
      hint: "Le code est une combinaison de lettres des mots en MAJUSCULE.",
    },
    medium: {
      hint: "Une fuite d'information est dans le message, plusieurs lettres sont en majuscules, dans le d√©sordre et permettront de former un mot, √† toi de voir quel mot cela donne ! Un seul chiffre peut √™tre cr√©√©.",
    },
    hard: {
      hint: "Il manque certaines lettres dans le texte. Troure les lettres manquantes pour former un mot qui donne un chiffre.",
    },
  };

  const puzzle = securityPuzzles[difficulty];

  // Afficher l'indice dans une notification
  if (window.showMessage) {
    window.showMessage(`üí° Indice : ${puzzle.hint}`, "info");
  }
}

// Exporter les fonctions
window.loadSecurityPuzzle = loadSecurityPuzzle;
window.showSecurityHint = showSecurityHint;
