// √ânigme USB - Supports amovibles (3 niveaux de difficult√©)
function loadUsbPuzzle(container) {
  // Configuration de la difficult√© depuis l'API
  const difficulty = window.gameState?.difficulty || "easy";

  // D√©finition des √©nigmes selon la difficult√©
  const usbPuzzles = {
    easy: {
      hint: "Le chiffre est √©crit en num√©rique et int√©gr√© dans le texte, il est facile √† rep√©rer.",
      title: "CL√â USB INCONNUE TROUV√âE",
      content: `CL√â USB INCONNUE TROUV√âE

Tu travailles dans une usine et tu trouves une cl√© USB pos√©e sur un bureau.
Elle n'a pas d'√©tiquette et tu ne sais pas √† qui elle appartient.

Sur la cl√© USB, un fichier texte contient la s√©quence :

INF0RMATIONCONFIDENTIELLES

T√¢che : Trouve le chiffre dans le mot, celui-ci sera ta cl√©.

‚ö†Ô∏è ATTENTION : Ne jamais brancher une cl√© USB inconnue !
Les supports amovibles sont des vecteurs courants d'intrusion.`,
      answer: "0",
      maxAttempts: 3,
    },
    medium: {
      hint: "Concentre-toi sur le fichier li√© √† la configuration des machines. Le chiffre dans son nom est la cl√©.",
      title: "ANALYSE D'UNE CL√â USB INTERNE",
      content: `ANALYSE D'UNE CL√â USB INTERNE

Un technicien te confie une cl√© USB utilis√©e pour transf√©rer des fichiers 
de mise √† jour des machines. Tu dois v√©rifier son contenu avant de l'utiliser.

Fichiers pr√©sents sur la cl√© :
‚Ä¢ update1.exe
‚Ä¢ config3.bak
‚Ä¢ log5.txt

T√¢che : Quel est le chiffre qui indique le fichier le plus critique 
√† v√©rifier en priorit√© ?

üí° INFO : Un fichier .bak est une sauvegarde de configuration.
Dans l'industrie, ces fichiers contiennent les r√©glages des machines
et peuvent √™tre alt√©r√©s pour changer des param√®tres critiques.`,
      answer: "3",
      maxAttempts: 3,
    },
    hard: {
      hint: "Le chiffre est dans le nom du fichier le plus critique pour la s√©curit√© OT.",
      title: "CL√â USB COMPROMISE DANS UN ENVIRONNEMENT OT",
      content: `CL√â USB COMPROMISE DANS UN ENVIRONNEMENT OT

Une cl√© USB destin√©e √† mettre √† jour le syst√®me de production a √©t√© 
d√©tect√©e comme suspecte par le syst√®me de logs.

Contenu de la cl√© USB :
‚Ä¢ backup6_final.doc
‚Ä¢ script2_update.bat
‚Ä¢ audit4_report.pdf

T√¢che : Trouve le chiffre correspondant au fichier le plus critique 
pour la s√©curit√© OT.

‚ö†Ô∏è CRITIQUE : Un fichier .bat est un script ex√©cutable Windows.
Dans un r√©seau industriel, un script malveillant peut :
‚Ä¢ Alt√©rer les connexions entre serveurs et automates
‚Ä¢ Injecter du code dans des programmes de supervision
‚Ä¢ Ouvrir une porte d'acc√®s √† un hacker`,
      answer: "2",
      maxAttempts: 3,
    },
  };

  const puzzle = usbPuzzles[difficulty];

  container.innerHTML = `
        <div class="puzzle-hint" style="display: none;">
            <strong>üí° Indice :</strong> ${puzzle.hint}
        </div>
        
        <div class="usb-container">
            <div class="usb-header">
                <h3>${puzzle.title}</h3>
                <div class="usb-icon">üíæ</div>
            </div>
            
            <div class="usb-content">
                <div class="usb-files">
                    ${puzzle.content}
                </div>
            </div>
        </div>
        
        <div class="code-input-section">
            <label for="usb-code">Chiffre :</label>
            <input type="text" id="usb-code" maxlength="1" placeholder="?" />
            <button id="submit-usb" class="btn btn-primary">Valider</button>
        </div>
        
        <div id="usb-feedback" class="feedback"></div>
        <div id="usb-attempts" class="attempts-count"></div>
    `;

  // Configuration des √©v√©nements
  const codeInput = container.querySelector("#usb-code");
  const submitBtn = container.querySelector("#submit-usb");
  const feedback = container.querySelector("#usb-feedback");
  const attemptsDisplay = container.querySelector("#usb-attempts");

  let attempts = 0;
  const maxAttempts = puzzle.maxAttempts;

  // Mettre √† jour l'affichage des tentatives
  function updateAttemptsDisplay() {
    attemptsDisplay.textContent = `Tentatives : ${attempts}/${maxAttempts}`;
  }

  // Validation du code
  submitBtn.addEventListener("click", function () {
    const code = codeInput.value.trim();
    attempts++;

    if (code === puzzle.answer) {
      // Code correct
      feedback.innerHTML = `<div class="success">‚úÖ Correct ! Le chiffre est ${puzzle.answer}</div>`;
      codeInput.disabled = true;
      submitBtn.disabled = true;
      submitBtn.textContent = "‚úì R√©solu";

      // Compl√©ter le puzzle
      setTimeout(() => {
        completePuzzle("usb", puzzle.answer);
      }, 1000);

      playSound("success");
    } else {
      // Code incorrect
      if (attempts >= maxAttempts) {
        feedback.innerHTML = `<div class="error">‚ùå √âchec ! Le chiffre √©tait ${puzzle.answer}</div>`;
        codeInput.disabled = true;
        submitBtn.disabled = true;
        submitBtn.textContent = "‚úó √âchou√©";
      } else {
        feedback.innerHTML = `<div class="error">‚ùå Incorrect. ${puzzle.hint}</div>`;
        codeInput.classList.add("shake");
        setTimeout(() => {
          codeInput.classList.remove("shake");
        }, 500);
      }
      playSound("error");
    }

    updateAttemptsDisplay();
  });

  // Validation en temps r√©el
  codeInput.addEventListener("input", function () {
    this.value = this.value.replace(/\D/g, ""); // Seulement les chiffres
    feedback.innerHTML = "";
  });

  // Validation avec Entr√©e
  codeInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      submitBtn.click();
    }
  });

  // Initialiser l'affichage des tentatives
  updateAttemptsDisplay();

  // Focus sur l'input
  codeInput.focus();
}

// Fonction pour afficher l'indice
function showUsbHint() {
  const hintElement = document.querySelector(".puzzle-hint");
  if (hintElement) {
    hintElement.style.display = "block";
    hintElement.classList.add("show");
  }
}

// Exporter les fonctions
window.loadUsbPuzzle = loadUsbPuzzle;
window.showUsbHint = showUsbHint;
