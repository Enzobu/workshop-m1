// √ânigme Documents - Acrostiche (3 niveaux de difficult√©)
function loadDocumentsPuzzle(container) {
  // Configuration de la difficult√© depuis l'API
  const difficulty = window.gameState?.difficulty || "easy";

  // D√©finition des √©nigmes selon la difficult√©
  const docPuzzles = {
    easy: {
      hint: "Regarde le d√©but de chaque ligne du rapport...",
      title: "RAPPORT DE S√âCURIT√â - R√âSEAU LYC√âE",
      content: `RAPPORT DE S√âCURIT√â - R√âSEAU LYC√âE

Tous les syst√®mes sont op√©rationnels
Rien de suspect d√©tect√© aujourd'hui
Ordinateurs fonctionnent normalement
Incidents signal√©s : aucun
S√©curit√© renforc√©e depuis hier

V√©rifications effectu√©es :
- Pare-feu actif
- Antivirus √† jour
- Sauvegardes OK
- Acc√®s contr√¥l√©s

Recommandations :
- Maintenir la vigilance
- Former le personnel
- Mettre √† jour les mots de passe

Sign√© : Service Informatique`,
      answer: "3",
      maxAttempts: 3,
    },
    medium: {
      hint: "Extrais le mot cach√© dans le po√®me en prenant la premi√®re lettre de chaque ligne...",
      title: "NOTIFICATION DE LIVRAISON",
      content: `De : notifications@colis-express.com
Objet : Votre colis est en attente

Bonjour,

Votre colis est en attente dans notre entrep√¥t.
Un bloc po√©tique cache une information importante.

PO√àME :
Pense √† v√©rifier l'exp√©diteur avant d'ouvrir,
En route, certaines adresses demandent v√©rification,
Toujours passer par le site officiel pour confirmer.
Silence dans l'entrep√¥t, machines en veille,

Cordialement,
Service Client Colis Express`,
      answer: "7", // "sept" = 7
      maxAttempts: 3,
    },
    hard: {
      hint: "Le chiffre est cach√© verticalement au centre exact d'un mot sur chaque ligne. Lis les lettres de haut en bas...",
      title: "MESSAGE TROUV√â SUR √âCRAN D'AUTOMATE",
      content: `MESSAGE TROUV√â SUR √âCRAN D'AUTOMATE

Certains contr√¥les automatiques pr√©viennent les erreurs et permettent de garder le syst√®me Constantement s√©curis√©.
Les techniciens ajustent les r√©glages pour √©viter tout probl√®me Inattendu.
Les donn√©es remontent r√©guli√®rement et aucune alarme n'est ignor√©e Naturellement.
La s√©curit√© informatique est maintenue gr√¢ce aux proc√©dures qui garantissent la protecQtion.

Analysez ce message pour trouver le chiffre cach√©.`,
      answer: "5", // "CINQ" cach√© verticalement
      maxAttempts: 3,
    },
  };

  const puzzle = docPuzzles[difficulty];

  container.innerHTML = `
        <div class="puzzle-hint" style="display: none;">
            <strong>üí° Indice :</strong> ${puzzle.hint}
        </div>
        
        <div class="document-editor">
            <h3>${puzzle.title}</h3>
            <div class="document-content">${puzzle.content}</div>
        </div>
        
        <div class="code-input-section">
            <label for="doc-code">Chiffre :</label>
            <input type="text" id="doc-code" maxlength="1" placeholder="?" />
            <button id="submit-doc" class="btn btn-primary">Valider</button>
        </div>
        
        <div id="doc-feedback" class="feedback"></div>
        <div id="doc-attempts" class="attempts-count"></div>
    `;

  // Configuration des √©v√©nements
  const codeInput = container.querySelector("#doc-code");
  const submitBtn = container.querySelector("#submit-doc");
  const feedback = container.querySelector("#doc-feedback");
  const attemptsDisplay = container.querySelector("#doc-attempts");

  let attempts = 0;
  const maxAttempts = puzzle.maxAttempts;

  // Mettre √† jour l'affichage des tentatives
  function updateAttemptsDisplay() {
    attemptsDisplay.textContent = `Tentatives : ${attempts}/${maxAttempts}`;
  }

  // Validation du code
  submitBtn.addEventListener("click", function () {
    const code = codeInput.value.trim();
    attempts++;

    if (code === puzzle.answer) {
      // Code correct
      feedback.innerHTML = `<div class="success">‚úÖ Correct ! Le chiffre est ${puzzle.answer}</div>`;
      codeInput.disabled = true;
      submitBtn.disabled = true;
      submitBtn.textContent = "‚úì R√©solu";

      // Compl√©ter le puzzle
      setTimeout(() => {
        completePuzzle("documents", puzzle.answer);
      }, 1000);

      playSound("success");
    } else {
      // Code incorrect
      if (attempts >= maxAttempts) {
        feedback.innerHTML = `<div class="error">‚ùå √âchec ! Le chiffre √©tait ${puzzle.answer}</div>`;
        codeInput.disabled = true;
        submitBtn.disabled = true;
        submitBtn.textContent = "‚úó √âchou√©";
      } else {
        feedback.innerHTML = `<div class="error">‚ùå Incorrect. ${puzzle.hint}</div>`;
        codeInput.classList.add("shake");
        setTimeout(() => {
          codeInput.classList.remove("shake");
        }, 500);
      }
      playSound("error");
    }

    updateAttemptsDisplay();
  });

  // Validation en temps r√©el
  codeInput.addEventListener("input", function () {
    this.value = this.value.replace(/\D/g, ""); // Seulement les chiffres
    feedback.innerHTML = "";
  });

  // Validation avec Entr√©e
  codeInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      submitBtn.click();
    }
  });

  // Initialiser l'affichage des tentatives
  updateAttemptsDisplay();

  // Focus sur l'input
  codeInput.focus();
}

// Fonction pour afficher l'indice
function showDocumentsHint() {
  const hintElement = document.querySelector(".puzzle-hint");
  if (hintElement) {
    hintElement.style.display = "block";
    hintElement.classList.add("show");
  }
}

// Exporter les fonctions
window.loadDocumentsPuzzle = loadDocumentsPuzzle;
window.showDocumentsHint = showDocumentsHint;
