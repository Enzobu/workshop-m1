name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint_backend:
    name: Lint Symfony
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: symfony, composer
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install deps (no dev on PR is fine, we lint only)
        run: composer install --no-interaction --prefer-dist

      - name: Lint YAML
        run: php bin/console lint:yaml config --parse-tags

      - name: Lint Twig
        run: php bin/console lint:twig templates

      - name: Lint Container
        run: php bin/console lint:container

      - name: PHP syntax check
        run: |
          find src -type f -name "*.php" -print0 | xargs -0 -n1 -P4 php -l

  lint_front:
    name: Lint Front (HTML/CSS/JS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-${{ runner.os }}-

      - name: Install tooling
        run: |
          npm ci || npm i --no-fund --no-audit
          npx --yes htmlhint --version
          npx --yes stylelint --version
          npx --yes eslint --version

      - name: Lint HTML
        run: npx htmlhint "**/*.html"

      - name: Lint CSS
        run: npx stylelint "**/*.css"

      - name: Lint JS
        run: npx eslint "**/*.js"

  build_docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: [lint_backend, lint_front]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: |
          docker build \
            --file docker/api/Dockerfile \
            --tag api:${{ github.sha }} \
            .

      - name: Build Front image
        run: |
          docker build \
            --file docker/front/Dockerfile \
            --tag front:${{ github.sha }} \
            .

  deploy_ssh:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: build_docker
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # Facultatif si vous ne voulez pas StrictHostKeyChecking=no
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null
          fi

      - name: Rsync project to server
        run: |
          rsync -az --delete \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_ed25519" \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "vendor" \
            ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.APP_PATH }}

      - name: Remote deploy commands
        run: |
          ssh -p "${{ secrets.SSH_PORT || '22' }}" -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd "${APP_PATH}"
          # Installer dépendances si nécessaire
          if [ -f composer.json ]; then
            composer install --no-dev --optimize-autoloader || true
          fi
          if [ -f package.json ]; then
            npm ci --omit=dev || true
          fi

          # Docker compose (v2)
          if command -v docker >/dev/null 2>&1; then
            docker compose pull || true
            docker compose build --no-cache || true
            docker compose up -d
            docker system prune -af || true
          fi
          EOF
        env:
          APP_PATH: ${{ secrets.APP_PATH }}
